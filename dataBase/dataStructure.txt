TODO LIST
Office 
Send email to boss for leave
Plan client visit for Monday
Assign Work to Rahul 

Home 
Get 2 Ltr Milk
Get the fan repaired 
Mob the floor

Operation = addTodo = {
  title: Office,
  todoTask :[
    {
    todo:"OfficeSend email to boss for leave,status",
    status:true/false
    },
    {
      todo:"Plan client visit for Monday",
      status:true/false
    },
    {
      todo: "Assign Work to Rahul",
      status: true/false
    }
  ]
}

Operation = deleteTodo = "todoId"

Operation = deleteTodoTask = {
  todoId:1,
  taskId:2
}

Operation = markDone = {
  todoId:1,
  taskId:2
}

Operation = markNotDone = {
  todoId:1,
  taskId:2
}

data
todoTask = 
title = OfficeSend email to boss for leave,status
           Plan client visit for Monday
           Assign Work to Rahul 

Operation = 



[
  {
    todoId : 1,
    title: Office,
    todoTask:[
      {
        todo: "Send email to boss for leave"
        taskId:1,
        done:true/false
      },
      {
        todo: "Plan client visit for Monday"
        taskId:2,
        done:true/false
      },
      {
        todo: "Assign Work to Rahul "
        taskId:3,
        done:true/false
      }
    ]
  },
  {
   todoId : 2,
    title: Home,
    todoTask:[
      {
        todo: "Get 2 Ltr Milk"
        taskId:1,
        done:true/false
      },
      {
        todo: "Get the fan repaired "
        taskId:2,
        done:true/false
      },
      {
        todo: "Mob the floor"
        taskId:3,
        done:true/false
      }
    ]
  }
]


const fs = require('fs');
// const queryString = require('querystring');
const {App} = require('../lib/app');
const contentTypes = require('../lib/mimeTypes.js');
const {Todo} = require('../lib/todoList');

const STATIC_FOLDER = `${__dirname}/../public`;
const isFileExists = function(path) {
  const stat = fs.existsSync(path) && fs.statSync(path);
  return !stat || !stat.isFile();
};

const filePath = './dataBase/todoList.json';
const taskName = JSON.parse(fs.readFileSync(filePath, 'utf8'));
const todoList = new Todo(taskName);

const sendResponse = function(res, content, contentType, status = 200) {
  res.writeHead(status, {
    'content-type': contentType,
    'content-length': content.length
  });
  res.write(content);
  res.end();
};

const methodNotAllowed = function(req, res) {
  const statusCode = 400;
  res.writeHead(statusCode);
  res.end('Method Not Allowed');
};

const fileNotFound = function(req, res) {
  const content = fs.readFileSync(`${STATIC_FOLDER}/html/absentFile.html`);
  const statusCode = 404;
  sendResponse(res, content, 'text/html', statusCode);
};

const serveStaticFile = (req, res, next) => {
  req.url = req.url === '/' ? '/html/index.html' : req.url;
  const path = `${STATIC_FOLDER}${req.url}`;
  if (isFileExists(path)) {
    return next();
  }
  const [, extension] = path.match(/.*\.(.*)$/);
  const contentType = contentTypes[extension];
  const content = fs.readFileSync(path);
  sendResponse(res, content, contentType);
};

const readBody = function(req, res, next) {
  let data = '';
  req.on('data', chunk => {
    data += chunk;
  });
  req.on('end', () => {
    if (req.headers['content-type'] === 'application/json' && data) {
      // data = queryString.parse(data);
      data = JSON.parse(data);
    }
    req.body = data;
    next();
  });
};

const toggleStatus = function(req, res) {
  const filePath = './dataBase/todoList.json';
  const [todoId, taskId] = req.body.split('_');
  const content = JSON.stringify(todoList.toggleStatus(todoId, taskId));
  fs.writeFileSync(filePath, todoList.toJSON());
  sendResponse(res, content, 'application/json');
};

const serveTodoList = function(req, res) {
  const content = todoList.toJSON();
  sendResponse(res, content, 'application/json');
};

const addTask = function(req, res) {
  const filePath = './dataBase/todoList.json';
  // const {title, id} = JSON.parse(req.body);
  const {title, id} = req.body;
  const content = JSON.stringify(todoList.addTask(title, id));
  fs.writeFileSync(filePath, todoList.toJSON());
  sendResponse(res, content, 'application/json');
};

const addTodo = function(req, res) {
  const filePath = './dataBase/todoList.json';
  // todoList.addNewTodo(JSON.parse(req.body));
  todoList.addNewTodo(req.body);
  const content = todoList.toJSON();
  fs.writeFileSync(filePath, content);
  sendResponse(res, content, 'application/json');
};

const deleteTask = function(req, res) {
  const filePath = './dataBase/todoList.json';
  const [todoId, taskId] = req.body.split('_');
  const content = JSON.stringify(todoList.deleteTask(todoId, taskId));
  fs.writeFileSync(filePath, todoList.toJSON());
  sendResponse(res, content, 'application/json');
};

const deleteTodo = function(req, res) {
  const filePath = './dataBase/todoList.json';
  todoList.deleteTodo(req.body);
  const content = todoList.toJSON();
  fs.writeFileSync(filePath, content);
  sendResponse(res, content, 'application/json');
};

const app = new App();

app.use(readBody);
app.get('/getAllTodo', serveTodoList);
app.get('', serveStaticFile);
app.get('', fileNotFound);
app.post('/addTodo', addTodo);
app.delete('/deleteTodo', deleteTodo);
app.post('/addTask', addTask);
app.post('/toggleStatus', toggleStatus);
app.delete('/deleteTask', deleteTask);
app.use(methodNotAllowed);

module.exports = {app};
